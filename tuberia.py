import tkinter as tk
from tkinter import ttk, messagebox, font, filedialog
import subprocess
import sys
from datetime import datetime

# Diccionarios base actualizados
# √Åreas de conductores por tipo de aislamiento (mm¬≤)
areas_conductores = {
    "THW": {
        "14": 2.08, "12": 3.31, "10": 5.26, "8": 8.37, "6": 13.3, "4": 21.2,
        "3": 26.7, "2": 33.6, "1": 42.4, "1/0": 53.5, "2/0": 67.4, 
        "3/0": 85.0, "4/0": 107.2
    },
    "XHHW": {
        "14": 1.97, "12": 3.12, "10": 5.03, "8": 8.09, "6": 13.0, "4": 21.1,
        "3": 26.2, "2": 33.3, "1": 42.1, "1/0": 53.0, "2/0": 67.0,
        "3/0": 85.0, "4/0": 107.0
    },
    "THHN": {
        "14": 1.63, "12": 2.53, "10": 4.18, "8": 6.62, "6": 10.7, "4": 17.2,
        "3": 21.2, "2": 26.7, "1": 32.7, "1/0": 41.7, "2/0": 52.6,
        "3/0": 64.2, "4/0": 78.7
    }
}

# Tabla de tuber√≠as con √°reas totales (mm¬≤)
tabla_tuberias = {
    "EMT": {
        "1/2": 196, "3/4": 336, "1": 558, "1 1/4": 832, 
        "1 1/2": 1033, "2": 1809
    },
    "PVC": {
        "1/2": 233, "3/4": 387, "1": 638, "1 1/4": 897, 
        "1 1/2": 1038, "2": 1632
    },
    "IMC": {
        "1/2": 243, "3/4": 408, "1": 682, "1 1/4": 987, 
        "1 1/2": 1220, "2": 1990
    },
    "RMC": {
        "1/2": 234, "3/4": 387, "1": 638, "1 1/4": 897, 
        "1 1/2": 1038, "2": 1632
    }
}

# Tipos disponibles
aislamientos = ["THW", "XHHW", "THHN"]
tipos_tuberia = ["EMT", "PVC", "IMC", "RMC"]

class CalculadoraTuberias:
    def __init__(self, root):
        self.root = root
        self.root.title("Sistema de C√°lculos El√©ctricos - Hertz Ingenier√≠a & Servicios El√©ctricos")
        self.root.geometry("1400x800")
        self.root.configure(bg="#f5f5f5")
        self.root.resizable(True, True)
        
        # Configurar fuente global compatible
        self.configurar_fuentes_globales()
        
        # Validaci√≥n adicional para asegurar fuente v√°lida
        if not hasattr(self, 'fuente_principal') or not self.fuente_principal:
            self.fuente_principal = "Arial"
            print("üîß Validaci√≥n adicional: forzando Arial")
        
        print(f"üéØ Fuente final confirmada: '{self.fuente_principal}'")
        
        # Configurar fuentes espec√≠ficas con validaci√≥n
        self.font_texto = (self.fuente_principal, 10)
        self.font_subtitulo = (self.fuente_principal, 12, "bold")
        self.font_titulo = (self.fuente_principal, 14, "bold")
        
        print(f"üìù Fuentes configuradas:")
        print(f"   - Texto: {self.font_texto}")
        print(f"   - Subt√≠tulo: {self.font_subtitulo}")
        print(f"   - T√≠tulo: {self.font_titulo}")
        
        # Lista para almacenar conductores agregados
        self.conductores = []
        
        # Variables de estado
        self.ultima_tuberia_recomendada = None
        
        self.crear_interfaz()
        
    def configurar_fuentes_globales(self):
        """Configura fuente global con detecci√≥n robusta"""
        # Lista de fuentes a probar en orden de preferencia
        fuentes_candidatas = ["Century Gothic", "Calibri", "Segoe UI", "Arial", "Helvetica"]
        fuente_principal = "Arial"  # Valor por defecto seguro
        
        print("üîç Detectando fuentes disponibles...")
        
        # Obtener lista de fuentes del sistema
        try:
            root_temp = tk.Tk()
            fuentes_sistema = list(font.families())
            root_temp.destroy()
            
            print(f"üìã Fuentes disponibles en el sistema: {len(fuentes_sistema)}")
            
            # Buscar Century Gothic espec√≠ficamente
            for fuente_disponible in fuentes_sistema:
                if "Century Gothic" in fuente_disponible:
                    fuente_principal = "Century Gothic"
                    print("‚úÖ Century Gothic encontrada y seleccionada")
                    break
            else:
                # Si no se encuentra Century Gothic, usar Arial
                print("‚ö†Ô∏è  Century Gothic no encontrada, usando Arial")
                fuente_principal = "Arial"
                
        except Exception as e:
            print(f"‚ùå Error al detectar fuentes: {e}")
            fuente_principal = "Arial"
        
        # Validaci√≥n final
        if not isinstance(fuente_principal, str) or len(fuente_principal) == 0:
            fuente_principal = "Arial"
            print("üîß Fallback final a Arial")
        
        print(f"üéØ Fuente seleccionada: '{fuente_principal}'")
        
        # Establecer fuente por defecto
        try:
            default_font = font.nametofont("TkDefaultFont")
            default_font.configure(family=fuente_principal, size=10)
            self.root.option_add("*Font", f"{fuente_principal} 10")
        except Exception as e:
            print(f"‚ùå Error al configurar fuente por defecto: {e}")
            fuente_principal = "Arial"
        
        # Configurar estilos TTK
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Configurar estilos espec√≠ficos con manejo de errores
        try:
            self.style.configure("TCombobox", 
                                fieldbackground="white", 
                                background="white", 
                                font=(fuente_principal, 10))
            
            self.style.configure("Treeview", 
                                font=(fuente_principal, 10))
            
            self.style.configure("Treeview.Heading", 
                                font=(fuente_principal, 10, "bold"))
            
            self.style.configure("TLabelFrame", 
                                font=(fuente_principal, 10, "bold"))
            
            self.style.configure("TLabelFrame.Label", 
                                font=(fuente_principal, 10, "bold"))
        except Exception as e:
            print(f"‚ùå Error al configurar estilos TTK: {e}")
        
        # Guardar fuente principal para uso en widgets
        self.fuente_principal = fuente_principal
        print(f"üíæ self.fuente_principal = '{self.fuente_principal}'")
        
    def crear_interfaz(self):
        # Header con fondo azul oscuro
        header_frame = tk.Frame(self.root, bg="#2c3e50", height=120)
        header_frame.pack(fill="x")
        header_frame.pack_propagate(False)
        
        # T√≠tulo principal con fuente compatible
        titulo = tk.Label(header_frame, text="SISTEMA DE C√ÅLCULOS EL√âCTRICOS", 
                         font=(self.fuente_principal, 24, "bold"), bg="#2c3e50", fg="white")
        titulo.pack(pady=(20, 5))
        
        # Subt√≠tulo con fuente compatible
        subtitulo = tk.Label(header_frame, text="NOM-001-SEDE-2012 ‚Ä¢ Hertz Ingenier√≠a & Servicios El√©ctricos S.A de C.V", 
                           font=(self.fuente_principal, 12), bg="#2c3e50", fg="white")
        subtitulo.pack()
        
        # M√≥dulo actual con fuente compatible
        modulo = tk.Label(header_frame, text="C√ÅLCULO DE TUBER√çAS EL√âCTRICAS", 
                         font=(self.fuente_principal, 14, "bold"), bg="#2c3e50", fg="#3498db")
        modulo.pack(pady=(10, 0))
        
        # Contenedor principal con tres columnas
        main_container = tk.Frame(self.root, bg="#f5f5f5")
        main_container.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Configurar grid del contenedor principal
        main_container.grid_columnconfigure(0, weight=1)
        main_container.grid_columnconfigure(1, weight=1)
        main_container.grid_columnconfigure(2, weight=1)
        main_container.grid_rowconfigure(0, weight=1)
        
        # COLUMNA 1: Datos de Entrada
        self.crear_columna_datos(main_container)
        
        # COLUMNA 2: Resultados del C√°lculo
        self.crear_columna_resultados(main_container)
        
        # COLUMNA 3: Informaci√≥n T√©cnica
        self.crear_columna_info(main_container)
        
    def crear_columna_datos(self, parent):
        # Frame principal de datos con altura fija
        datos_frame = tk.LabelFrame(parent, text="Datos del C√°lculo de Tuber√≠a", 
                                   font=self.font_subtitulo, bg="white", 
                                   relief="groove", bd=2, padx=15, pady=15)
        datos_frame.grid(row=0, column=0, sticky="nsew", padx=(0, 10))
        datos_frame.config(height=700)  # Altura fija para evitar colapso
        datos_frame.pack_propagate(False)  # Evitar que se colapse
        
        # Configurar expansi√≥n interna
        datos_frame.grid_columnconfigure(0, weight=1)
        
        # Secci√≥n de agregar conductores
        conductor_frame = tk.LabelFrame(datos_frame, text="Datos del Conductor", 
                                       font=(self.fuente_principal, 10, "bold"), bg="white")
        conductor_frame.pack(fill="x", pady=(0, 20), padx=10)
        conductor_frame.grid_columnconfigure(1, weight=1)
        
        # Aislamiento
        tk.Label(conductor_frame, text="Aislamiento:", bg="white", 
                font=(self.fuente_principal, 10)).grid(row=0, column=0, sticky="w", padx=10, pady=8)
        self.cb_aislamiento = ttk.Combobox(conductor_frame, values=aislamientos, 
                                          state="readonly", width=15)
        self.cb_aislamiento.set("THW")
        self.cb_aislamiento.bind("<<ComboboxSelected>>", self.on_aislamiento_change)
        self.cb_aislamiento.grid(row=0, column=1, sticky="ew", padx=10, pady=8)
        
        # Calibre
        tk.Label(conductor_frame, text="Calibre:", bg="white", 
                font=(self.fuente_principal, 10)).grid(row=1, column=0, sticky="w", padx=10, pady=8)
        self.cb_calibre = ttk.Combobox(conductor_frame, state="readonly", width=15)
        self.cb_calibre.bind("<<ComboboxSelected>>", self.validar_campos)
        self.cb_calibre.grid(row=1, column=1, sticky="ew", padx=10, pady=8)
        
        # Cantidad
        tk.Label(conductor_frame, text="Cantidad:", bg="white", 
                font=(self.fuente_principal, 10)).grid(row=2, column=0, sticky="w", padx=10, pady=8)
        self.entry_cantidad = tk.Entry(conductor_frame, width=15, font=(self.fuente_principal, 10))
        self.entry_cantidad.bind("<KeyRelease>", self.validar_campos)
        self.entry_cantidad.grid(row=2, column=1, sticky="ew", padx=10, pady=8)
        
        # Bot√≥n agregar con esquema de colores profesional
        self.btn_agregar = tk.Button(conductor_frame, text="Agregar Conductor", 
                                    command=self.agregar_conductor, 
                                    bg="#1e3a8a", fg="white",
                                    activebackground="#1e40af", activeforeground="white",
                                    font=(self.fuente_principal, 10, "bold"), 
                                    relief="flat", cursor="hand2", pady=8,
                                    state="disabled")
        self.btn_agregar.grid(row=3, column=0, columnspan=2, sticky="ew", padx=10, pady=15)
        
        # Separador visual
        ttk.Separator(datos_frame, orient='horizontal').pack(fill='x', pady=10)
        
        # Inicializar calibres para THW por defecto
        self.on_aislamiento_change()
        
        # Lista de conductores agregados
        lista_frame = tk.LabelFrame(datos_frame, text="Conductores Agregados", 
                                   font=(self.fuente_principal, 10, "bold"), bg="white")
        lista_frame.pack(fill="x", pady=(0, 20), padx=10)
        
        # Crear Treeview m√°s compacto
        columns = ("Aisla.", "Calibre", "Cant.", "√Årea(mm¬≤)")
        self.tree = ttk.Treeview(lista_frame, columns=columns, show="headings", height=4)
        
        # Configurar columnas m√°s peque√±as
        self.tree.heading("Aisla.", text="Aisla.")
        self.tree.heading("Calibre", text="Calibre")
        self.tree.heading("Cant.", text="Cant.")
        self.tree.heading("√Årea(mm¬≤)", text="√Årea(mm¬≤)")
        
        self.tree.column("Aisla.", width=60, anchor="center")
        self.tree.column("Calibre", width=60, anchor="center")
        self.tree.column("Cant.", width=50, anchor="center")
        self.tree.column("√Årea(mm¬≤)", width=80, anchor="center")
        
        self.tree.pack(fill="x", padx=10, pady=10)
        
        # Frame para botones de lista con esquema profesional
        botones_lista_frame = tk.Frame(lista_frame, bg="white")
        botones_lista_frame.pack(fill="x", padx=10, pady=10)
        
        btn_eliminar = tk.Button(botones_lista_frame, text="Eliminar", 
                                command=self.eliminar_conductor, 
                                bg="#ef4444", fg="white",
                                activebackground="#dc2626", activeforeground="white",
                                font=(self.fuente_principal, 9, "bold"), 
                                relief="flat", cursor="hand2", width=10)
        btn_eliminar.pack(side="left", padx=(0, 5))
        
        btn_limpiar = tk.Button(botones_lista_frame, text="Limpiar Todo", 
                               command=self.limpiar_todo, 
                               bg="#6b7280", fg="white",
                               activebackground="#4b5563", activeforeground="white",
                               font=(self.fuente_principal, 9, "bold"), 
                               relief="flat", cursor="hand2", width=10)
        btn_limpiar.pack(side="left", padx=5)
        
        # Separador visual
        ttk.Separator(datos_frame, orient='horizontal').pack(fill='x', pady=10)
        
        # Configuraci√≥n de tuber√≠a
        config_frame = tk.LabelFrame(datos_frame, text="Configuraci√≥n", 
                                    font=(self.fuente_principal, 10, "bold"), bg="white")
        config_frame.pack(fill="x", pady=(0, 20), padx=10)
        
        tk.Label(config_frame, text="Tipo de tuber√≠a:", bg="white", 
                font=(self.fuente_principal, 10)).pack(anchor="w", padx=10, pady=(10, 5))
        self.cb_tuberia = ttk.Combobox(config_frame, values=tipos_tuberia, 
                                      state="readonly", width=20)
        self.cb_tuberia.set("EMT")
        self.cb_tuberia.pack(fill="x", padx=10, pady=5)
        
        self.var_auto = tk.BooleanVar(value=True)
        cb_auto = tk.Checkbutton(config_frame, text="Selecci√≥n autom√°tica", 
                                variable=self.var_auto, bg="white", 
                                font=(self.fuente_principal, 10))
        cb_auto.pack(anchor="w", padx=10, pady=(5, 10))
        
        # === BOT√ìN CALCULAR - POSICI√ìN GARANTIZADA ===
        print("=== CREANDO BOT√ìN CALCULAR ===")
        
        # Separador antes del bot√≥n
        ttk.Separator(datos_frame, orient='horizontal').pack(fill='x', pady=(10, 15))
        
        # Frame espec√≠fico para el bot√≥n calcular con fondo de color para debug
        calcular_frame = tk.Frame(datos_frame, bg="#f0f0f0", relief="solid", bd=1)
        calcular_frame.pack(fill="x", pady=10, padx=10)
        
        # Etiqueta de debug
        debug_label = tk.Label(calcular_frame, text="ZONA DEL BOT√ìN CALCULAR", 
                              bg="#f0f0f0", font=(self.fuente_principal, 8))
        debug_label.pack(pady=2)
        
        # BOT√ìN CALCULAR PRINCIPAL
        self.btn_calcular = tk.Button(calcular_frame, 
                                     text="üîß CALCULAR TUBER√çA", 
                                     command=self.calcular_tuberia, 
                                     bg="#1e3a8a",  # Azul profesional
                                     fg="white",
                                     activebackground="#1e40af", 
                                     activeforeground="white",
                                     font=(self.fuente_principal, 12, "bold"), 
                                     relief="flat", 
                                     cursor="hand2", 
                                     height=2,
                                     state="normal")
        self.btn_calcular.pack(fill="x", padx=5, pady=10)
        
        print("‚úì BOT√ìN CALCULAR CREADO Y EMPAQUETADO")
        
        # Separador despu√©s del bot√≥n
        ttk.Separator(datos_frame, orient='horizontal').pack(fill='x', pady=(15, 10))
        
        # Frame para botones adicionales
        botones_frame = tk.Frame(datos_frame, bg="white")
        botones_frame.pack(fill="x", pady=10, padx=10)
        
        # Bot√≥n exportar
        btn_exportar = tk.Button(botones_frame, text="üìÑ Exportar", 
                                command=self.exportar_reporte, 
                                bg="#10b981", fg="white",
                                activebackground="#059669", activeforeground="white",
                                font=(self.fuente_principal, 10, "bold"), 
                                relief="flat", cursor="hand2", pady=8)
        btn_exportar.pack(fill="x", pady=2)
        
        # Bot√≥n de regreso
        btn_regreso = tk.Button(botones_frame, text="‚Üê REGRESAR AL MEN√ö", 
                              command=self.regresar_menu, 
                              bg="#6b7280", fg="white",
                              activebackground="#4b5563", activeforeground="white",
                              font=(self.fuente_principal, 10, "bold"), 
                              relief="flat", cursor="hand2", pady=8)
        btn_regreso.pack(fill="x", pady=2)
        
        # Validar estado inicial del bot√≥n calcular
        self.validar_boton_calcular()
        print("=== COLUMNA DATOS COMPLETADA ===")
        
    def crear_columna_resultados(self, parent):
        # Frame de resultados
        resultados_frame = tk.LabelFrame(parent, text="Resultados del C√°lculo", 
                                        font=self.font_subtitulo, bg="white",
                                        relief="groove", bd=2, padx=15, pady=15)
        resultados_frame.grid(row=0, column=1, sticky="nsew", padx=5)
        
        # √Årea de texto para resultados con fuente compatible
        self.text_resultado = tk.Text(resultados_frame, wrap="word", 
                                    font=(self.fuente_principal, 9), bg="#f8f9fa",
                                    relief="sunken", bd=1, padx=10, pady=10)
        self.text_resultado.pack(fill="both", expand=True)
        
        # Scrollbar para resultados
        scrollbar_result = ttk.Scrollbar(resultados_frame, orient="vertical", 
                                        command=self.text_resultado.yview)
        self.text_resultado.configure(yscrollcommand=scrollbar_result.set)
        scrollbar_result.pack(side="right", fill="y")
        
        # Mensaje inicial con mejor formato
        mensaje_inicial = """CALCULADORA DE TUBER√çAS NOM-001-SEDE-2012

INSTRUCCIONES DE USO:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. Seleccione el aislamiento del conductor
2. Escoja el calibre del conductor  
3. Ingrese la cantidad de conductores
4. Presione 'Agregar Conductor'
5. Repita para todos los conductores
6. Seleccione tipo de tuber√≠a
7. Presione 'CALCULAR' para obtener resultados

üìê F√ìRMULAS PRINCIPALES:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. √Årea total = Œ£(√Årea individual √ó Cantidad)
2. √Årea disponible = √Årea tuber√≠a √ó Factor llenado
3. % Llenado = (√Årea total / √Årea tuber√≠a) √ó 100
4. Criterio: √Årea total ‚â§ √Årea disponible

‚ö° EJEMPLO R√ÅPIDO:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Problema: ¬øQu√© tuber√≠a EMT necesito para 3 conductores #12 THW?

Soluci√≥n:
‚Ä¢ √Årea individual #12 THW: 3.31 mm¬≤
‚Ä¢ √Årea total: 3.31 √ó 3 = 9.93 mm¬≤
‚Ä¢ Factor (3 conductores): 53%
‚Ä¢ Tuber√≠a EMT 1/2": 196 √ó 0.53 = 103.88 mm¬≤
‚Ä¢ Verificaci√≥n: 9.93 ‚â§ 103.88 ‚úì CUMPLE
‚Ä¢ % Llenado: (9.93/196) √ó 100 = 5.07%
‚Ä¢ Resultado: EMT 1/2" es suficiente

CARACTER√çSTICAS DEL SISTEMA:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

El sistema calcular√° autom√°ticamente:
‚Ä¢ √Årea total ocupada por conductores
‚Ä¢ Factor de llenado seg√∫n norma
‚Ä¢ Tuber√≠a recomendada
‚Ä¢ Cumplimiento normativo
‚Ä¢ Tabla resumen de todas las opciones

Tipos de aislamiento disponibles:
‚Ä¢ THW: Resistente al calor y humedad
‚Ä¢ XHHW: Resistente al calor, humedad y aceite
‚Ä¢ THHN: Nylon termopl√°stico de alta resistencia

Tipos de tuber√≠a disponibles:
‚Ä¢ EMT: Electrical Metallic Tubing
‚Ä¢ PVC: Cloruro de Polivinilo
‚Ä¢ IMC: Intermediate Metal Conduit  
‚Ä¢ RMC: Rigid Metal Conduit"""
        
        self.text_resultado.insert(1.0, mensaje_inicial)
        
    def crear_columna_info(self, parent):
        # Frame de informaci√≥n
        info_frame = tk.LabelFrame(parent, text="Informaci√≥n T√©cnica", 
                                  font=self.font_subtitulo, bg="white",
                                  relief="groove", bd=2, padx=15, pady=15)
        info_frame.grid(row=0, column=2, sticky="nsew", padx=(10, 0))
        
        # Informaci√≥n normativa con fuente compatible
        info_text = tk.Text(info_frame, wrap="word", font=(self.fuente_principal, 9), 
                          bg="#ecf0f1", relief="flat", height=20, padx=10, pady=10)
        info_text.pack(fill="both", expand=True)
        
        info_content = """REFERENCIAS NOM-001-SEDE-2012:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìê F√ìRMULAS DE C√ÅLCULO:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1Ô∏è‚É£ √ÅREA TOTAL DE CONDUCTORES:
   √Årea_total = Œ£(√Årea_individual √ó Cantidad)
   
   Ejemplo: 3 conductores #12 THW
   √Årea_total = 3.31 mm¬≤ √ó 3 = 9.93 mm¬≤

2Ô∏è‚É£ √ÅREA DISPONIBLE EN TUBER√çA:
   √Årea_disponible = √Årea_tuber√≠a √ó Factor_llenado
   
   Ejemplo: Tuber√≠a EMT 1/2" con 3 conductores
   √Årea_disponible = 196 mm¬≤ √ó 0.53 = 103.88 mm¬≤

3Ô∏è‚É£ PORCENTAJE DE LLENADO:
   % Llenado = (√Årea_total / √Årea_tuber√≠a) √ó 100
   
   Ejemplo: 9.93 mm¬≤ en tuber√≠a 196 mm¬≤
   % Llenado = (9.93 / 196) √ó 100 = 5.07%

4Ô∏è‚É£ CRITERIO DE CUMPLIMIENTO:
   CUMPLE si: √Årea_total ‚â§ √Årea_disponible
   
   Verificaci√≥n: 9.93 mm¬≤ ‚â§ 103.88 mm¬≤ ‚úì CUMPLE

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã FACTORES DE LLENADO:
Art. 310-15(b)(2)(A), Tabla 1:
‚Ä¢ 1 conductor: 100% (Factor = 1.00)
‚Ä¢ 2 conductores: 31% (Factor = 0.31)
‚Ä¢ 3+ conductores: 53% (Factor = 0.53)

‚ö†Ô∏è FACTORES DE REDUCCI√ìN:
Art. 310-15(b)(2)(a):
‚Ä¢ M√°s de 9 conductores requieren factores
  de reducci√≥n adicionales por agrupamiento

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üîß COMPARATIVA DE AISLAMIENTOS:
THW vs XHHW vs THHN (Conductor #12):
‚Ä¢ THW: 3.31 mm¬≤ (Mayor √°rea)
‚Ä¢ XHHW: 3.12 mm¬≤ (√Årea intermedia)  
‚Ä¢ THHN: 2.53 mm¬≤ (Menor √°rea, mayor densidad)

üìè CAPACIDADES DE TUBER√çAS:
√Årea total disponible (mm¬≤):

EMT: 196 - 1809 mm¬≤
PVC: 233 - 1632 mm¬≤
IMC: 243 - 1990 mm¬≤
RMC: 234 - 1632 mm¬≤

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö° EJEMPLO COMPLETO:
Calcular tuber√≠a para:
- 4 conductores #10 THHN
- √Årea individual: 4.18 mm¬≤
- √Årea total: 4.18 √ó 4 = 16.72 mm¬≤
- Factor (4 conductores): 53%
- Tuber√≠a EMT 1/2": 196 √ó 0.53 = 103.88 mm¬≤
- Verificaci√≥n: 16.72 ‚â§ 103.88 ‚úì CUMPLE
- % Llenado: (16.72/196) √ó 100 = 8.53%

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ PROCESO DE SELECCI√ìN:
1. Calcular √°rea total de conductores
2. Determinar factor de llenado (1, 2, 3+ cond.)
3. Evaluar cada tuber√≠a disponible
4. Seleccionar menor que cumple criterio
5. Verificar cumplimiento normativo

üö® CONSIDERACIONES ESPECIALES:
‚Ä¢ Temperatura ambiente: 30¬∞C
‚Ä¢ Conductores de cobre
‚Ä¢ No incluye conductores de tierra
‚Ä¢ Para >9 conductores: factores adicionales
‚Ä¢ Instalaci√≥n en ambiente seco

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä CRITERIOS DE DECISI√ìN:
‚Ä¢ Costo vs capacidad
‚Ä¢ Facilidad de instalaci√≥n
‚Ä¢ Futuras ampliaciones
‚Ä¢ Condiciones ambientales
‚Ä¢ Requisitos mec√°nicos"""
        
        info_text.insert(1.0, info_content)
        info_text.configure(state="disabled")
        
    def on_aislamiento_change(self, event=None):
        """Actualiza los calibres disponibles seg√∫n el aislamiento seleccionado"""
        aislamiento = self.cb_aislamiento.get()
        if aislamiento in areas_conductores:
            calibres = list(areas_conductores[aislamiento].keys())
            self.cb_calibre.configure(values=calibres)
            self.cb_calibre.set("")  # Limpiar selecci√≥n
        self.validar_campos()
    
    def validar_campos(self, event=None):
        """Valida que todos los campos est√©n completos y v√°lidos"""
        try:
            aislamiento = self.cb_aislamiento.get()
            calibre = self.cb_calibre.get()
            cantidad_str = self.entry_cantidad.get().strip()
            
            # Validar que hay aislamiento y calibre
            if not aislamiento or not calibre:
                self.btn_agregar.configure(state="disabled")
                return
            
            # Validar cantidad
            if not cantidad_str:
                self.btn_agregar.configure(state="disabled")
                return
            
            cantidad = int(cantidad_str)
            if cantidad <= 0:
                self.btn_agregar.configure(state="disabled")
                return
            
            # Si todo es v√°lido, habilitar bot√≥n
            self.btn_agregar.configure(state="normal")
            
        except ValueError:
            self.btn_agregar.configure(state="disabled")
    
    def validar_boton_calcular(self):
        """Habilita el bot√≥n calcular solo si hay conductores agregados"""
        # Verificar que el bot√≥n exista antes de intentar modificarlo
        if not hasattr(self, 'btn_calcular'):
            print("ERROR: btn_calcular no existe a√∫n")
            return
        
        cantidad_conductores = len(self.conductores)
        print(f"Validando bot√≥n calcular. Conductores: {cantidad_conductores}")
        
        if cantidad_conductores > 0:
            self.btn_calcular.configure(state="normal", bg="#1e3a8a")
            print(f"Bot√≥n CALCULAR habilitado - {cantidad_conductores} conductores")
        else:
            self.btn_calcular.configure(state="normal", bg="#6b7280")  # Gris cuando no hay conductores
            print("Bot√≥n CALCULAR visible pero sin conductores")
    
    def agregar_conductor(self):
        try:
            aislamiento = self.cb_aislamiento.get()
            calibre = self.cb_calibre.get()
            cantidad = int(self.entry_cantidad.get())
            
            if not aislamiento or not calibre:
                messagebox.showerror("Error", "Seleccione aislamiento y calibre")
                return
            
            if cantidad <= 0:
                messagebox.showerror("Error", "La cantidad debe ser mayor a 0")
                return
            
            # Obtener √°rea unitaria
            area_unitaria = areas_conductores[aislamiento].get(calibre, 0)
            area_total = area_unitaria * cantidad
            
            # Agregar a la lista
            conductor = {
                "aislamiento": aislamiento,
                "calibre": calibre,
                "cantidad": cantidad,
                "area_unitaria": area_unitaria,
                "area_total": area_total
            }
            
            self.conductores.append(conductor)
            
            # Agregar al Treeview
            self.tree.insert("", "end", values=(
                aislamiento, calibre, cantidad, f"{area_total:.1f}"
            ))
            
            # Limpiar entrada
            self.cb_calibre.set("")
            self.entry_cantidad.delete(0, tk.END)
            
            # Validar estado de botones
            self.validar_campos()  # Para el bot√≥n agregar
            self.validar_boton_calcular()  # Para el bot√≥n calcular
            
        except ValueError:
            messagebox.showerror("Error", "Ingrese una cantidad v√°lida")
    
    def eliminar_conductor(self):
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("Advertencia", "Seleccione un conductor para eliminar")
            return
        
        # Obtener √≠ndice del elemento seleccionado
        index = self.tree.index(selection[0])
        
        # Eliminar de la lista y del Treeview
        del self.conductores[index]
        self.tree.delete(selection[0])
        
        # Validar estado del bot√≥n calcular
        self.validar_boton_calcular()
    
    def limpiar_todo(self):
        """Limpia todos los conductores agregados"""
        if messagebox.askyesno("Confirmar", "¬øDesea limpiar todos los conductores?"):
            self.conductores.clear()
            # Limpiar Treeview
            for item in self.tree.get_children():
                self.tree.delete(item)
            
            # Validar estado de botones
            self.validar_boton_calcular()
            
            # Limpiar √°rea de resultados con formato mejorado
            self.text_resultado.delete(1.0, tk.END)
            mensaje_inicial = """CONDUCTORES ELIMINADOS

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Todos los conductores han sido eliminados de la lista.

Para continuar:
1. Agregue nuevos conductores usando el formulario
2. Complete todos los campos requeridos
3. Presione 'Agregar Conductor'
4. Repita para todos los conductores necesarios
5. Presione 'CALCULAR' para obtener resultados

El sistema est√° listo para un nuevo c√°lculo."""
            self.text_resultado.insert(1.0, mensaje_inicial)
    
    def calcular_area_total(self):
        total = 0
        for conductor in self.conductores:
            total += conductor["area_total"]
        return total
    
    def obtener_limite_norma(self, cantidad_total):
        if cantidad_total == 1:
            return 1.00
        elif cantidad_total == 2:
            return 0.31
        else:
            return 0.53
    
    def verificar_factores_reduccion(self, cantidad_total):
        """Verifica si se requieren factores de reducci√≥n adicionales"""
        if cantidad_total > 9:
            return True, "Se requieren factores de reducci√≥n por m√°s de 9 conductores"
        return False, ""
    
    def calcular_tuberia(self):
        if not self.conductores:
            messagebox.showwarning("Advertencia", "Agregue al menos un conductor")
            return
        
        # Calcular √°rea total
        area_total = self.calcular_area_total()
        cantidad_total = sum(c["cantidad"] for c in self.conductores)
        
        # Obtener l√≠mite seg√∫n norma y tipo de tuber√≠a
        limite = self.obtener_limite_norma(cantidad_total)
        tipo_tuberia = self.cb_tuberia.get()
        
        # Verificar factores de reducci√≥n adicionales
        requiere_reduccion, mensaje_reduccion = self.verificar_factores_reduccion(cantidad_total)
        
        resultado = f"REPORTE DE C√ÅLCULO DE TUBER√çA {tipo_tuberia}\n"
        resultado += f"NOM-001-SEDE-2012\n"
        resultado += f"{'='*55}\n"
        resultado += f"Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n"
        
        resultado += f"CONDUCTORES EN EL C√ÅLCULO:\n"
        resultado += f"{'-'*35}\n"
        for i, c in enumerate(self.conductores, 1):
            resultado += f"{i}. {c['aislamiento']} #{c['calibre']} √ó {c['cantidad']} conductor(es)\n"
            resultado += f"   √Årea: {c['area_unitaria']:.2f} mm¬≤ √ó {c['cantidad']} = {c['area_total']:.2f} mm¬≤\n\n"
        
        resultado += f"RESUMEN DEL C√ÅLCULO:\n"
        resultado += f"{'-'*25}\n"
        resultado += f"‚Ä¢ Total de conductores: {cantidad_total}\n"
        resultado += f"‚Ä¢ √Årea total requerida: {area_total:.2f} mm¬≤\n"
        resultado += f"‚Ä¢ Factor de llenado NOM: {limite*100:.0f}%\n"
        
        # Agregar f√≥rmulas utilizadas
        resultado += f"\nüìê F√ìRMULAS APLICADAS:\n"
        resultado += f"{'-'*25}\n"
        resultado += f"1. √Årea total = Œ£(√Årea individual √ó Cantidad)\n"
        if len(self.conductores) > 1:
            formula_detalle = " + ".join([f"({c['area_unitaria']:.2f} √ó {c['cantidad']})" for c in self.conductores])
            resultado += f"   = {formula_detalle} = {area_total:.2f} mm¬≤\n"
        else:
            c = self.conductores[0]
            resultado += f"   = {c['area_unitaria']:.2f} √ó {c['cantidad']} = {area_total:.2f} mm¬≤\n"
        
        resultado += f"\n2. √Årea disponible = √Årea tuber√≠a √ó Factor ({limite:.2f})\n"
        resultado += f"3. % Llenado = (√Årea total / √Årea tuber√≠a) √ó 100\n"
        resultado += f"4. Criterio: √Årea total ‚â§ √Årea disponible\n"
        
        # Agregar referencia normativa exacta
        if cantidad_total == 1:
            resultado += f"\n‚Ä¢ Referencia: Art. 310-15(b)(2)(A), Tabla 1 - NOM-001-SEDE-2012\n"
            resultado += f"  (Un conductor: 100% del √°rea de tuber√≠a)\n"
        elif cantidad_total == 2:
            resultado += f"\n‚Ä¢ Referencia: Art. 310-15(b)(2)(A), Tabla 1 - NOM-001-SEDE-2012\n"
            resultado += f"  (Dos conductores: 31% del √°rea de tuber√≠a)\n"
        else:
            resultado += f"\n‚Ä¢ Referencia: Art. 310-15(b)(2)(A), Tabla 1 - NOM-001-SEDE-2012\n"
            resultado += f"  (Tres o m√°s conductores: 53% del √°rea de tuber√≠a)\n"
        
        # Advertencia para m√°s de 9 conductores
        if requiere_reduccion:
            resultado += f"\n‚ö†Ô∏è  ADVERTENCIA NORMATIVA:\n"
            resultado += f"   {mensaje_reduccion}\n"
            resultado += f"   Consulte Art. 310-15(b)(2)(a) para factores\n"
            resultado += f"   de reducci√≥n por agrupamiento.\n"
        
        resultado += f"\n"
        
        if self.var_auto.get():
            resultado += f"AN√ÅLISIS DE TUBER√çAS {tipo_tuberia}:\n"
            resultado += f"{'-'*35}\n"
            
            tuberia_seleccionada = None
            tuberias_que_cumplen = []
            tabla_resumen = []
            
            for diametro, area_total_tub in tabla_tuberias[tipo_tuberia].items():
                area_disponible = area_total_tub * limite
                porcentaje_llenado = (area_total / area_total_tub) * 100
                
                resultado += f"{tipo_tuberia} {diametro}\":\n"
                resultado += f"  √Årea total: {area_total_tub:.0f} mm¬≤\n"
                resultado += f"  √Årea disponible: {area_disponible:.0f} mm¬≤ ({limite*100:.0f}%)\n"
                resultado += f"  C√°lculo: {area_total_tub:.0f} √ó {limite:.2f} = {area_disponible:.0f} mm¬≤\n"
                resultado += f"  Llenado actual: {porcentaje_llenado:.1f}%\n"
                resultado += f"  C√°lculo: ({area_total:.1f}/{area_total_tub:.0f}) √ó 100 = {porcentaje_llenado:.1f}%\n"
                
                if area_total <= area_disponible:
                    estado = "‚úì CUMPLE"
                    resultado += f"  Estado: {estado}\n\n"
                    tuberias_que_cumplen.append((diametro, area_total_tub, porcentaje_llenado))
                    if tuberia_seleccionada is None:
                        tuberia_seleccionada = (diametro, area_total_tub, porcentaje_llenado)
                else:
                    estado = "‚úó NO CUMPLE"
                    resultado += f"  Estado: {estado} (excede factor de llenado)\n\n"
                
                # Agregar a tabla resumen
                tabla_resumen.append({
                    'diametro': diametro,
                    'area_total': area_total_tub,
                    'area_disponible': area_disponible,
                    'porcentaje': porcentaje_llenado,
                    'estado': estado
                })
            
            # TABLA RESUMEN
            resultado += f"TABLA RESUMEN - TUBER√çAS {tipo_tuberia}:\n"
            resultado += f"{'='*60}\n"
            resultado += f"{'Di√°metro':<10} {'√Årea Total':<12} {'Disponible':<12} {'Llenado':<10} {'Estado':<15}\n"
            resultado += f"{'-'*60}\n"
            for tuberia in tabla_resumen:
                resultado += f"{tuberia['diametro']:<10} {tuberia['area_total']:.0f} mm¬≤{'':<4} {tuberia['area_disponible']:.0f} mm¬≤{'':<4} {tuberia['porcentaje']:.1f}%{'':<6} {tuberia['estado']:<15}\n"
            resultado += f"{'='*60}\n\n"
            
            resultado += f"RESULTADO FINAL:\n"
            resultado += f"{'-'*20}\n"
            if tuberia_seleccionada:
                diametro, area_tub, porcentaje = tuberia_seleccionada
                area_disponible_rec = area_tub * limite
                
                # Formato mejorado de recomendaci√≥n
                resultado += f"üéØ TUBER√çA RECOMENDADA: {tipo_tuberia} {diametro}\"\n"
                resultado += f"   ‚Ä¢ √Årea total: {area_tub:.0f} mm¬≤\n"
                resultado += f"   ‚Ä¢ Disponible: {area_disponible_rec:.0f} mm¬≤ (Factor {limite:.2f})\n"
                resultado += f"   ‚Ä¢ Llenado: {porcentaje:.1f}%\n"
                resultado += f"   ‚Ä¢ Estado: ‚úì CUMPLE NOM-001-SEDE-2012\n\n"
                
                if len(tuberias_que_cumplen) > 1:
                    resultado += f"ALTERNATIVAS V√ÅLIDAS:\n"
                    for i, (diam, area, porc) in enumerate(tuberias_que_cumplen[1:], 2):
                        area_disp_alt = area * limite
                        resultado += f"   {i}. {tipo_tuberia} {diam}\" ‚Ä¢ √Årea: {area:.0f} mm¬≤ ‚Ä¢ Disponible: {area_disp_alt:.0f} mm¬≤ ‚Ä¢ Llenado: {porc:.1f}% ‚Ä¢ ‚úì CUMPLE\n"
                    resultado += f"\n"
                
                resultado += f"ESPECIFICACI√ìN T√âCNICA:\n"
                resultado += f"Instalar tuber√≠a conduit {tipo_tuberia} de {diametro}\" \n"
                resultado += f"conforme al Art. 310-15(b)(2)(A), Tabla 1 - NOM-001-SEDE-2012.\n"
                
                if requiere_reduccion:
                    resultado += f"\nNOTA IMPORTANTE:\n"
                    resultado += f"Verificar factores de reducci√≥n adicionales por\n"
                    resultado += f"agrupamiento de conductores (Art. 310-15(b)(2)(a))."
                
                self.ultima_tuberia_recomendada = f"{tipo_tuberia} {diametro}\""
                
                # Agregar indicador visual de cumplimiento
                self.mostrar_estado_cumplimiento("‚úì CUMPLE", "#10b981")
            else:
                resultado += f"‚ö†Ô∏è ADVERTENCIA CR√çTICA:\n"
                resultado += f"   Ninguna tuber√≠a {tipo_tuberia} est√°ndar cumple con la norma\n"
                resultado += f"   RECOMENDACIONES:\n"
                resultado += f"   ‚Ä¢ Usar tuber√≠a de mayor capacidad\n"
                resultado += f"   ‚Ä¢ Reducir n√∫mero de conductores\n"
                resultado += f"   ‚Ä¢ Cambiar tipo de aislamiento (menor √°rea)\n"
                resultado += f"   ‚Ä¢ Distribuir en m√∫ltiples tuber√≠as\n"
                self.ultima_tuberia_recomendada = "NINGUNA CUMPLE"
                
                # Agregar indicador visual de no cumplimiento
                self.mostrar_estado_cumplimiento("‚úó NO CUMPLE", "#ef4444")
                
                # Mostrar alerta
                messagebox.showwarning("Advertencia", 
                                     f"Ninguna tuber√≠a {tipo_tuberia} cumple con los requisitos.\n"
                                     f"Consulte las recomendaciones en el reporte.")
        
        # Mostrar resultado
        self.text_resultado.delete(1.0, tk.END)
        self.text_resultado.insert(1.0, resultado)
    
    def mostrar_estado_cumplimiento(self, texto, color):
        """Muestra un indicador visual del estado de cumplimiento"""
        # Crear o actualizar etiqueta de estado
        if hasattr(self, 'label_estado'):
            self.label_estado.destroy()
        
        # Encontrar el frame de resultados para agregar la etiqueta
        resultado_frame = self.text_resultado.master
        self.label_estado = tk.Label(resultado_frame, text=texto, 
                                   fg="white", bg=color,
                                   font=(self.fuente_principal, 12, "bold"),
                                   relief="flat", pady=10)
        self.label_estado.pack(side="bottom", fill="x", padx=10, pady=5)
    
    def exportar_reporte(self):
        """Exporta el reporte actual a un archivo de texto"""
        if not self.conductores:
            messagebox.showwarning("Advertencia", "No hay datos para exportar")
            return
        
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Archivos de texto", "*.txt"), ("Todos los archivos", "*.*")],
                title="Exportar Reporte de C√°lculo"
            )
            
            if filename:
                contenido = self.text_resultado.get(1.0, tk.END)
                with open(filename, 'w', encoding='utf-8') as file:
                    file.write(contenido)
                messagebox.showinfo("√âxito", f"Reporte exportado exitosamente:\n{filename}")
        except Exception as e:
            messagebox.showerror("Error", f"Error al exportar: {str(e)}")
    
    def regresar_menu(self):
        """Funci√≥n para regresar al men√∫ principal"""
        try:
            self.root.destroy()
            # Intentar ejecutar calculosint.py
            subprocess.run([sys.executable, "calculosint.py"], check=True)
        except FileNotFoundError:
            messagebox.showerror("Error", "No se encontr√≥ el archivo calculosint.py")
        except subprocess.CalledProcessError:
            messagebox.showerror("Error", "Error al ejecutar calculosint.py")
        except Exception as e:
            messagebox.showerror("Error", f"Error inesperado: {str(e)}")

def main():
    root = tk.Tk()
    app = CalculadoraTuberias(root)
    root.mainloop()

if __name__ == "__main__":
    main()